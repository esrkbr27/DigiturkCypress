          Unlocking Test Automation Superpowers


- Introduction
    - Cypress is a powerful end-to-end testing framework
    - One of its key features is its extensive set of commands
    - In this presentation, we will explore some essential Cypress commands
    - You can find information about cypreess at cypress.io website
    


- cy.visit()
    - Command used to visit a specific URL
    - Example: cy.visit('https://www.example.com')


- cy.get()
    - Command used to select elements on the page
    - Example: cy.get('.btn-primary')


- cy.click()
    - Command used to simulate a click on a specific element
    - Example: cy.get('.btn-primary').click()


- cy.type()
    - Command used to simulate keyboard input in form fields
    - Example: cy.get('#email-input').type('example@email.com')


- cy.contains()
    - Command used to assert the presence of specific text on the page
    - Example: cy.contains('Welcome to our website')


- cy.wait()
    - Command used to pause test execution for a specific duration
    - Example: cy.wait(1000) // Pauses for 1 second


- cy.should()
    - Command used to make assertions about elements and their properties
    - Example: cy.get('.message').should('be.visible')


- cy.intercept()
    - Command used to intercept HTTP requests and responses
    - Example: cy.intercept('GET', '/api/users').as('getUsers')

-cy.request()
   -API testleri yaparken request göndermek ve doğrulamalarını yapmak için kullanılır.     

-cy.fixtures()
    -Fixture dosyasında yer alan json formatındaki datayı 
    alıp testlerimizde kullanmamızı sağlar.   

-cy.go()  
   -Sayfada ileri gitmek için go('forward') veya go(1) komutunu,
   -Sayfada geri gitmek için go('back') veya go(-1) komutunu kullanabiliriz.  

-cy.reload()
   -Sayfanın yenilenmesini sağlar.   

-cy.viewport()   
   -viewport; görüş alanı demektir.Testlerimizi hangi responsive ölçüsünde
   çalıştırmak istiyorsak o ölçüleri komutun içerisine yazdığımız zaman testlerimiz
   o ölçülerde çalışacaktır.

-cy.writeFile()
   -Frameworkde bir txt dosyası oluşturup içine bir şeyler yazmak istiyorsak;
   öncelikle nereye dosyayı koymak istiyorsak oranın pathini yazarız,
   daha sonra da dosya içerisine yazmak istediğimiz metni yazarız.


-cy.readFile()  
   -Frameworkde bulunan bir dosyayı okumak istiyorsak;
   öncelikle okuyacağı dosyanın yolunu veriyoruz, daha sonra should ile
   veya export ile doğrulamalarını yapıyoruz.

-cy.scrollIntoView()
   -Verilen elmente kadar scroll yapar.scrollTo() metodu ile de verilen koordinata
   kadar scroll  yapmış olur.

-cy.check()
   -Tıklamak istediğimiz check boxı işaretler.   

-cy.uncheck()
   -Tiklediğimiz checkboxı kaldırır.   

      
   
                      CUSTOM COMMANDS

-Kullanıcı tarafından oluşturulan özel komutlardır.
-Testlerde sıklıkla tekrar eden kodları otomatize etmek için kullanılır.
-supportun altındaki commands.js dosyasına Cypress.Commands.add diyerek eklenir.aşagıdaki örnekte olduğu gibi;
fonksiyonun içine diğer classlardan çağırmak için kullanacağımız metot ismini yazarız,

support altındaki command.js dosyası
//Digiturk Login Fonksiyonu:
Cypress.Commands.add('login', (email, password) =>{
    cy.visit('https://digiturksite.kartega.com/')
    cy.get(':nth-child(8) > .btn').click()
    cy.get('#UserName').type(email)
    cy.get('#Password').type(password)
    cy.get('.login-right-button').click()
})

daha sonra classtan göndereceğimiz datalar için login fonksiyonuna parametreler ekleriz.
Testleri yazdığımız classtan 2 farklı yolla dataları gönderebiliriz:

1)login diyerek çağırır, parametre olarak da 
hangi değeri göndermek istiyorsak o değerleri parantez içerisine yazarız.

çağırdığımız class;
 cy.login('admin@com','admin124')

2)fixtures classından faydalanarak dataları göndermek istiyorsak;
fixtures dosyası altına .json uzantılı bir dosya oluşturup, json formatında 
dataları aşağıdaki gibi tanımlarız.
{
"url":"https://digiturksite.kartega.com/",
"email":"admin@admin.com",
"password":"admin1234"
}
-------------------------------------------------------------------------------------------

***NOT: Cypress spec ekranında testler çalışırken komutların altında xhr ları kaladırmak istiyorsak;
cypress/support/e2e.js classının içine aşağıdaki kod bloğunu eklersek;
xhr ların çıkmadığını göreceksiniz.

const app = window.top;
if (!app.document.head.querySelector('[data-hide-command-log-request]')) {
  const style = app.document.createElement('style');
  style.innerHTML =
    '.command-name-request, .command-name-xhr { display: none }';
  style.setAttribute('data-hide-command-log-request', '');

  app.document.head.appendChild(style);
}




 









